//建议使用NotePad查看此文件
点击Alt + a 可以关闭波浪线
学习网站：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
从Git添加GitHub远程库时需要添加Git的公钥，添加公钥以及配置参考网站：
https://www.cnblogs.com/superGG1990/p/6844952.html

①要注意在输入命令时，路径是否在Git文件夹中。
②在退出vim编辑器时，按住Esc，并按两下大写Z即可退出。
③命令行退出“>”，ctrl+d即可退出。

Git命令：

	基础命令：
		git init					//初始化git
		git clone 
		git add	<文件名>			//添加需要提交的文件
		git add .					//添加所有需要提交的文件
		git commit -m "提交注释"	//将文件提交到本地
		git status					//查看当前状态
		

一.分支管理
	1.创建与合并分支
		1）因为创建、合并和删除分支非常快，所以Git鼓励使用分支完成某个任务，合并后在删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
		
		git checkout -b <name>		//创建分支，然后切换到当前分支
		git branch <name>			//创建分支
		git checkout <name> 		//切换到某个分支
		git branch 					//查看当前分支，*表示当前使用的分支
		git merge <name>			//合并指定分支到当前分支
		git branch -d <name>		//删除指定分支
	
	2.解决冲突
		1）当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		
		git log --graph --pretty=oneline --abbrev-commit			//查看分支的合并情况
		
	3.分支管理策略
		1）在实际开发中，按照一下几个基本原则进行分支管理：
			①首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
			②干活都在dev分支上，也就是说，dev分支时不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
			③每个人干活都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
			④大致意思可以看图：https://cdn.liaoxuefeng.com/cdn/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0
		2）合并分支时，加上--no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
		
		git merge --no-ff -m "注释信息" <name>			//合并分支时，禁用Fast forward，注意 --no-ff
		
	4.Bug分支
		1）当有多个分支存在时，在其中一个分支添加文件（或者在某个空文件中添加了内容），此文件目前在其他分支没有，则当此文件没有在当前分支进行提交操作时，
		   在其他的分支可以看到这个文件，其他分支也可以对这个文件进行提交操作。哪个分支提交的这个文件，这个文件就属于哪个分支，
		   提交之后在其他分支不可见。
		2）当有多个分支存在时，在其中一个分支修改某个文件，这个文件在其他的分支中也存在，并且此文件不为空。这种情况下修改完之后，必须先提交进行的修改，
		   才可以切换到其他的分支。
		
		git stash 					//Git把stash内容存在某个地方，等以后恢复现场后再显示出来
		git stash list 				//查看储藏列表
		git stash apply				//恢复储藏内容，但是不删除储藏的内容
		git stash drop				//删除储藏内容
		git stash pop				//恢复储藏内容，并且删除储藏的内容
		git stash apply stash@{0}	//可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash
		git stash drop stash@{0}	//删除指定的stash
		
	5.多人协作
		1）多人协作的工作模式：
			①首先，可以试图用 git push origin <branch-name> 推送自己的修改；
			②如果推送失败，则因为远程分支比你的本地更新，需要先用 git pull 试图合并；
			③入股合并有冲突，则解决冲突，并在本地提交；
			④没有冲突或者解决掉冲突后，再用 git push origin <branch-name> 推送就能成功！
			注意：如果 git pull 提示"no tracking infomation"，则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream branch-name origin/<branch-name>
			
			git remote 			//查看远程库的信息
			git remote -v		//查看远程库的详细信息
			git push origin <branch-name>			//推送分支，就是把该分支上的所有本地提交推送到远程库，推送时，要指定本地分支
		
		2）推送分支时注意：
			①master分支是主分支，因此要时刻与远程同步；
			②dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
			③bug分支只用于在本地修复bug，没有必要推送到远程；
			④feature（功能）分支是否需要推送到远程，取决于是否和小伙伴合作在上面开发。
			
			git clone git@github.com:NiePen/learngit.git		//克隆远程库，默认情况下，只能看到本地的master分支，看不到其他的。
			git checkout -b dev origin/dev						//创建远程origin的dev分支到本地。
			git pull				//把最新的提交从远程抓取下来
			git branch --set-upstream dev origin/dev  或  git branch --set-upstream-to=origin/dev dev		//git pull失败时，原因是没有指定本地dev分支与远程origin/dev分支的链接，可以通过这两条命令的其中一条进行设置，设置之后再拉取
			
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		